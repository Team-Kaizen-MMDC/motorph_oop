/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

/**
 *
 * @author brianjancarlos
 */
import java.util.HashMap;
import java.util.Map;
import domain.EmployeeID;
import domain.HRAdmin;
import domain.HRAdmin;
import domain.EmployeeStatusComboItem;
import services.HRDatabaseConnection;
import javax.swing.JComboBox;
import java.sql.Connection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import services.DatabaseConnection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import javax.swing.text.JTextComponent;
import services.LoggerService;
import java.sql.ResultSet;

public class Employee_Database extends javax.swing.JFrame {

    /**
     * Creates new form Employee_Details_HRView
     */
    //Connection con;
    public Employee_Database() {
        initComponents();
        setLocationRelativeTo(null); // center the window
        InitializeForm();
        loadEmployeeStatuses();
        refreshTable();
        lbl_emp.setText(String.valueOf(EmployeeID.empid));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_employees = new javax.swing.JTable();
        lbl_MotorPHEmployeeDetails = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btn_clear = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete_record = new javax.swing.JButton();
        btn_add_record = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lbl_pagibig_num = new javax.swing.JLabel();
        lbl_sss_num = new javax.swing.JLabel();
        lbl_employee_id = new javax.swing.JLabel();
        txt_position = new javax.swing.JTextField();
        lbl_last_name = new javax.swing.JLabel();
        txt_first_name = new javax.swing.JTextField();
        txt_sss_num = new javax.swing.JTextField();
        txt_phone = new javax.swing.JTextField();
        txt_employee_id = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtarea_address = new javax.swing.JTextArea();
        txt_tin_number = new javax.swing.JTextField();
        txt_last_name = new javax.swing.JTextField();
        txt_pagibig_num = new javax.swing.JTextField();
        txt_birthday = new javax.swing.JTextField();
        txt_supervisor = new javax.swing.JTextField();
        lbl_status = new javax.swing.JLabel();
        lbl_philhealth_num = new javax.swing.JLabel();
        lbl_first_name = new javax.swing.JLabel();
        lbl_position = new javax.swing.JLabel();
        lbl_address = new javax.swing.JLabel();
        lbl_phone = new javax.swing.JLabel();
        lbl_birthday = new javax.swing.JLabel();
        lbl_tin_num = new javax.swing.JLabel();
        lbl_supervisor = new javax.swing.JLabel();
        txt_philhealth_num = new javax.swing.JTextField();
        jcombo_status = new javax.swing.JComboBox<>();
        txt_searchbox = new javax.swing.JTextField();
        lbl_loggedInAs = new javax.swing.JLabel();
        lbl_emp = new javax.swing.JLabel();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MotorPH Employee View");
        setName("frm_employeeDetails"); // NOI18N
        setResizable(false);

        tbl_employees.setBackground(new java.awt.Color(255, 182, 185));
        tbl_employees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Last Name", "First Name", "Birthday", "Address", "Phone", "Status", "SSS", "Philhealth", "TIN", "Pag-Ibig ID", "Position", "Immediate Supervisor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_employees.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbl_employees.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tbl_employeesFocusLost(evt);
            }
        });
        tbl_employees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_employeesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tbl_employeesMouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_employees);

        lbl_MotorPHEmployeeDetails.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_MotorPHEmployeeDetails.setText("MotorPH Employee Database");

        jPanel1.setBackground(new java.awt.Color(60, 63, 75));

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(60, 63, 75));
        btn_edit.setText("Edit");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete_record.setBackground(new java.awt.Color(60, 63, 75));
        btn_delete_record.setText("Delete");
        btn_delete_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete_recordActionPerformed(evt);
            }
        });

        btn_add_record.setBackground(new java.awt.Color(60, 63, 75));
        btn_add_record.setText("Add");
        btn_add_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_recordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_add_record, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_delete_record, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_delete_record, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_add_record, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setToolTipText("");

        lbl_pagibig_num.setText("Pag-ibig");

        lbl_sss_num.setText("SSS");

        lbl_employee_id.setText("Employee ID");

        lbl_last_name.setText("Last Name");

        txt_phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_phoneActionPerformed(evt);
            }
        });

        txt_employee_id.setEditable(false);

        txtarea_address.setColumns(20);
        txtarea_address.setRows(5);
        txtarea_address.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtarea_address);

        txt_birthday.setText("2000-01-01");
        txt_birthday.setToolTipText("yyyy-MM-dd");

        lbl_status.setText("Status");

        lbl_philhealth_num.setText("Philhealth");

        lbl_first_name.setText("First Name");

        lbl_position.setText("Position");

        lbl_address.setText("Address");

        lbl_phone.setText("Phone");

        lbl_birthday.setText("Birthday");

        lbl_tin_num.setText("TIN");

        lbl_supervisor.setText("Supervisor");

        jcombo_status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_phone, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbl_first_name, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_employee_id, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_first_name)
                            .addComponent(txt_employee_id)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_address, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lbl_birthday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_last_name, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_birthday)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_last_name))))
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbl_sss_num, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_philhealth_num, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_tin_num, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_philhealth_num)
                            .addComponent(txt_sss_num, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_tin_number, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_supervisor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_position, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_pagibig_num, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_status, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_pagibig_num)
                            .addComponent(txt_supervisor)
                            .addComponent(txt_position)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jcombo_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(188, 188, 188))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txt_birthday, txt_employee_id, txt_first_name, txt_last_name, txt_phone});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_employee_id, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_sss_num, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_sss_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_employee_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_first_name)
                        .addComponent(txt_first_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_philhealth_num, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_philhealth_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_tin_num, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_tin_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_last_name)
                        .addComponent(txt_last_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_birthday)
                        .addComponent(txt_birthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_pagibig_num, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_pagibig_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_position, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_supervisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_supervisor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_address))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_phone))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_status)
                        .addComponent(jcombo_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lbl_address, lbl_birthday, lbl_employee_id, lbl_first_name, lbl_last_name, lbl_phone, lbl_status, txt_birthday, txt_employee_id, txt_first_name, txt_last_name, txt_phone});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lbl_pagibig_num, lbl_philhealth_num, lbl_position, lbl_sss_num, lbl_supervisor, lbl_tin_num});

        txt_searchbox.setText("Filter...");
        txt_searchbox.setToolTipText("");
        txt_searchbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchboxActionPerformed(evt);
            }
        });
        txt_searchbox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchboxKeyReleased(evt);
            }
        });

        lbl_loggedInAs.setText("Logged in As: ");

        lbl_emp.setText("Emp_ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(txt_searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_MotorPHEmployeeDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(260, 260, 260)
                        .addComponent(lbl_loggedInAs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_emp)))
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_MotorPHEmployeeDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_loggedInAs)
                    .addComponent(lbl_emp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_employeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_employeesMouseClicked
        btn_delete_record.setEnabled(true);
        int selected_row = tbl_employees.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        txt_employee_id.setText(model.getValueAt(selected_row, 0).toString()); // Get Column 0 which is the Employee ID
        txt_first_name.setText(model.getValueAt(selected_row, 1).toString());
        txt_last_name.setText(model.getValueAt(selected_row, 2).toString());
        txt_birthday.setText(model.getValueAt(selected_row, 3).toString());
        txtarea_address.setLineWrap(true);
        txtarea_address.setText(model.getValueAt(selected_row, 4).toString());
        txt_phone.setText(model.getValueAt(selected_row, 5).toString());
        jcombo_status.setSelectedItem(model.getValueAt(selected_row, 6).toString());
        txt_sss_num.setText(model.getValueAt(selected_row, 7).toString());
        txt_philhealth_num.setText(model.getValueAt(selected_row, 8).toString());
        txt_tin_number.setText(model.getValueAt(selected_row, 9).toString());
        txt_pagibig_num.setText(model.getValueAt(selected_row, 10).toString());
        txt_position.setText(model.getValueAt(selected_row, 11).toString());
        txt_supervisor.setText(model.getValueAt(selected_row, 12).toString());

    }//GEN-LAST:event_tbl_employeesMouseClicked

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        List<JTextComponent> fields = Arrays.asList(
                txt_employee_id, txt_first_name, txt_last_name, txtarea_address,
                txt_phone, txt_sss_num, txt_philhealth_num, txt_tin_number,
                txt_pagibig_num, txt_position, txt_supervisor
        );

        for (JTextComponent field : fields) {
            field.setText(null);
        }
        txt_birthday.setText("yyyy-MM-dd");
        txt_searchbox.setToolTipText("Search");
        txt_searchbox.setText("Search..");
        Search("*"); // Resets Searchbox and refresh the JTable
        refreshTable();

    }//GEN-LAST:event_btn_clearActionPerformed

    private void txt_searchboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchboxActionPerformed

    }//GEN-LAST:event_txt_searchboxActionPerformed

    private void txt_searchboxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchboxKeyReleased
        String searchString = txt_searchbox.getText();
        Search(searchString);
    }//GEN-LAST:event_txt_searchboxKeyReleased

    private void btn_add_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_recordActionPerformed
        try {
            // Check correct inputs from textfields !validated = If validation is true/successful then proceed
            if (!validateFields()) {
                return;
            }
            // Establish a connection to the database
            Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false);
            // Insert into employee table first
            int roleId = 4; // Employee
            int statusId = getStatusIdFromComboBox(jcombo_status);

            String sqlEmp = "INSERT INTO employee (last_name, first_name, birthday, address, phone_number, status_id, position_id, supervisor_id, role_id) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING employee_id";

            PreparedStatement pstmtEmp = conn.prepareStatement(sqlEmp);
            pstmtEmp.setString(1, txt_last_name.getText());
            pstmtEmp.setString(2, txt_first_name.getText());
            pstmtEmp.setDate(3, java.sql.Date.valueOf(txt_birthday.getText()));
            pstmtEmp.setString(4, txtarea_address.getText());
            pstmtEmp.setString(5, txt_phone.getText());
            pstmtEmp.setInt(6, statusId);
            pstmtEmp.setInt(7, Integer.parseInt(txt_position.getText()));
            pstmtEmp.setInt(8, Integer.parseInt(txt_supervisor.getText()));
            pstmtEmp.setInt(9, roleId);

            // Execute and retrieve generated employee_id
            ResultSet rsEmp = pstmtEmp.executeQuery();
            int employeeId = -1;
            if (rsEmp.next()) {
                employeeId = rsEmp.getInt("employee_id");
                LoggerService.logInfo("Generated Employee ID: " + employeeId);
            } else {
                LoggerService.logWarning("Failed to retrieve generated Employee ID.");
                conn.rollback();
                return;
            }

            // Insert into government_ids table using retrieved employee_id
            String sqlGovt = "INSERT INTO government_ids (employee_id, sss_number, philhealth_number, tin_number, pagibig_number) "
                    + "VALUES (?, ?, ?, ?, ?) RETURNING gov_id";
            PreparedStatement pstmtGovt = conn.prepareStatement(sqlGovt);
            pstmtGovt.setInt(1, employeeId);
            pstmtGovt.setString(2, txt_sss_num.getText());
            pstmtGovt.setString(3, txt_philhealth_num.getText());
            pstmtGovt.setString(4, txt_tin_number.getText());
            pstmtGovt.setString(5, txt_pagibig_num.getText());

            ResultSet rsGovt = pstmtGovt.executeQuery();
            int govtId = 0;
            if (rsGovt.next()) {
                govtId = rsGovt.getInt("gov_id");
                LoggerService.logInfo("Generated Government ID Record: " + govtId);
            } else {
                LoggerService.logWarning("Failed to retrieve generated Government ID.");
                conn.rollback();
                return;
            }

            // Commit transaction
            conn.commit();
            JOptionPane.showMessageDialog(null, "Record Added: " + txt_first_name.getText() + " " + txt_last_name.getText(), "Add Record", JOptionPane.INFORMATION_MESSAGE);

            // Close resources
            rsEmp.close();
            pstmtEmp.close();
            rsGovt.close();
            pstmtGovt.close();
            conn.close();
            refreshTable();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            LoggerService.logError("Database Error: ", e);

    }//GEN-LAST:event_btn_add_recordActionPerformed
    }

    private void btn_delete_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete_recordActionPerformed
        int selected_row = tbl_employees.getSelectedRow();
        if (selected_row == -1) {
            JOptionPane.showMessageDialog(null, "No record selected", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the employee_id of the selected row
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        int employee_id = Integer.parseInt(model.getValueAt(selected_row, 0).toString());

        // Show a confirmation dialog box
        int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this record?: Employee ID " + employee_id,
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            Connection conn = null;
            try {
                // Establish connection and disable auto-commit
                conn = DatabaseConnection.getConnection();
                conn.setAutoCommit(false);

                // Delete from government_ids first (due to foreign key constraint)
                String sqlGovt = "DELETE FROM government_ids WHERE employee_id = ?";
                PreparedStatement pstmtGovt = conn.prepareStatement(sqlGovt);
                pstmtGovt.setInt(1, employee_id);
                pstmtGovt.executeUpdate();

                // Then delete from employee table
                String sqlEmp = "DELETE FROM employee WHERE employee_id = ?";
                PreparedStatement pstmtEmp = conn.prepareStatement(sqlEmp);
                pstmtEmp.setInt(1, employee_id);
                pstmtEmp.executeUpdate();

                // Commit transaction
                conn.commit();
                JOptionPane.showMessageDialog(null, "Record deleted successfully", "Delete Record", JOptionPane.INFORMATION_MESSAGE);

                // Refresh the table
                refreshTable();
            } catch (SQLException e) {
                // Roll back transaction on error
                if (conn != null) {
                    try {
                        conn.rollback();
                    } catch (SQLException ex) {
                        LoggerService.logError("Error rolling back transaction: ", ex);
                    }
                }
                JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                LoggerService.logError("Database Error: ", e);
            } finally {
                // Close connection
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        LoggerService.logError("Error closing connection: ", ex);
                    }
                }
            }
        }
//        int selected_row = tbl_employees.getSelectedRow();
//        if (selected_row == -1) {
//            JOptionPane.showMessageDialog(null, "No record selected", "Error", JOptionPane.ERROR_MESSAGE, null);
//            return;
//        }
//
//        // Get the employee_id of the selected row
//        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
//        int employee_id = Integer.parseInt(model.getValueAt(selected_row, 0).toString());
//
//        // Show a confirmation dialog box
//        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?: " + employee_id, "Confirm Deletion", JOptionPane.YES_NO_OPTION);
//        if (confirm == JOptionPane.YES_OPTION) {
//            try {
//                // Establish a connection to the database using import DatabaseConnectionManager Class
//                Connection conn = DatabaseConnection.getConnection();
//
//                // Prepare a SQL DELETE statement
//                String sql = "DELETE FROM employee WHERE employee_id = ?";
//                PreparedStatement pstmt = conn.prepareStatement(sql);
//
//                // Set the employee_id
//                pstmt.setInt(1, employee_id);
//
//                // Execute the DELETE statement
//                pstmt.executeUpdate();
//
//                // Refresh the JTable
//                refreshTable();
//
//                // Close the connection
//                conn.close();
//            } catch (SQLException e) {
//                // Handle any SQL exceptions
//                JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);
//            }
//        }
    }//GEN-LAST:event_btn_delete_recordActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed

        try {
            // Check correct inputs from textfields
            if (!validateFields()) {
                return;
            }
            // Establish a connection to the database using import DatabaseConnectionManager Class
            Connection conn = DatabaseConnection.getConnection();

            // Create a SQL UPDATE statement
            String sql = "UPDATE employee SET last_name = ?, first_name = ?, birthday = ?, address = ?, phone_number = ?, status_id = ?,"
                    + "compensation_id = ?, role_id = ?,  WHERE employee_id = ?";

            // Prepare the statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the values from the text fields
            pstmt.setString(1, txt_first_name.getText());
            pstmt.setString(2, txt_last_name.getText());
            pstmt.setDate(3, java.sql.Date.valueOf(txt_birthday.getText()));
            pstmt.setString(4, txtarea_address.getText());
            pstmt.setString(5, txt_phone.getText());
//            pstmt.setString(6, txt_status.getText());
            pstmt.setString(7, txt_sss_num.getText());
            pstmt.setString(8, txt_philhealth_num.getText());
            pstmt.setString(9, txt_tin_number.getText());
            pstmt.setString(10, txt_pagibig_num.getText());
            pstmt.setString(11, txt_position.getText());
            pstmt.setString(12, txt_supervisor.getText());
            pstmt.setInt(13, Integer.parseInt(txt_employee_id.getText()));

            // Execute the statement
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Record Updated Name: " + txt_first_name.getText() + " " + txt_last_name.getText(), "Edit Record", JOptionPane.INFORMATION_MESSAGE, null);

            // Close the connection
            conn.close();
            refreshTable();

        } catch (SQLException e) {
            // Handle any SQL exceptions
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, null);
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private int getStatusIdFromComboBox(JComboBox<String> jcombo_status) {
        // use this to convert selected jcombo box item to status_id value

        String selectedStatus = jcombo_status.getSelectedItem().toString();
        Map<String, Integer> statusMap = new HashMap<>();
        statusMap.put("Probationary", 1);
        statusMap.put("Regular", 2);

        // Retrieve the corresponding status_id
        Integer statusId = statusMap.get(selectedStatus); // Get ID from the map

        if (statusId != null) {
            LoggerService.logInfo("Selected Status: " + selectedStatus);
            LoggerService.logInfo("Corresponding Status ID: " + statusId);
            return statusId; // Return the status ID as an int
        } else {
            LoggerService.logWarning("Status ID not found for: " + selectedStatus);
            return -1; // Return -1 as an error indicator if status is not found
        }
    }

    private void loadEmployeeStatuses() {
        try {
            // Establish a database connection
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT status_name FROM employment_statuses";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            // Clear existing items
            jcombo_status.removeAllItems();

            // Populate JComboBox with only status names
            while (rs.next()) {
                String statusName = rs.getString("status_name");
                jcombo_status.addItem(statusName);
            }

            // Close resources
            rs.close();
            pstmt.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error loading statuses: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void tbl_employeesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_employeesMouseExited
        // TODO add your handling code here:
        //btn_delete_record.setEnabled(false);
    }//GEN-LAST:event_tbl_employeesMouseExited

    private void tbl_employeesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbl_employeesFocusLost

    }//GEN-LAST:event_tbl_employeesFocusLost

    private void txt_phoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_phoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_phoneActionPerformed

    /**
     * **************************************************
     *
     * Place custom developed methods below this section
     *
     ****************************************************
     */
    // This Search function is used for case-insensitive search/filter via Search textbox
    public void Search(String str) {
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        TableRowSorter<DefaultTableModel> tableSorter = new TableRowSorter<>(model);
        tbl_employees.setRowSorter(tableSorter);
        tableSorter.setRowFilter(RowFilter.regexFilter("(?i)" + str)); // "(?i)" + makes the search case-INsensitive
    }

    private boolean validateFields() {
        // Check if any field is empty
        if (txt_first_name.getText().isEmpty() || txt_last_name.getText().isEmpty() || txt_birthday.getText().isEmpty() || txtarea_address.getText().isEmpty() || txt_phone.getText().isEmpty() || txt_sss_num.getText().isEmpty() || txt_philhealth_num.getText().isEmpty() || txt_tin_number.getText().isEmpty() || txt_pagibig_num.getText().isEmpty() || txt_position.getText().isEmpty() || txt_supervisor.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields are mandatory", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        // Check if the fields that should only contain integers contain valid integers
        try {
            Long.valueOf(txt_sss_num.getText());
            Long.valueOf(txt_philhealth_num.getText());
            Long.valueOf(txt_tin_number.getText());
            Long.valueOf(txt_pagibig_num.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Number value. Please enter numbers only on " + "SSS: " + txt_sss_num.getText()
                    + " Philhealth:" + txt_philhealth_num.getText() + " TIN:" + txt_tin_number.getText() + " PAGIBIG:" + txt_pagibig_num.getText(), "Error", JOptionPane.ERROR_MESSAGE
            );
            return false;
        }

        // Check if txt_birthday contains a valid date
        try {
            LocalDate.parse(txt_birthday.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "Invalid date value:" + txt_birthday.getText() + " Please enter in yyyy-MM-dd format", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void InitializeForm() {
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        model.setRowCount(0); // Clear existing data in the table

        HRDatabaseConnection conn = new HRDatabaseConnection();
        if (conn.connect()) {
            List<HRAdmin> employeeDetailArray = conn.getAllEmployeeDetails();
            conn.close();

            for (HRAdmin EmployeeDetail : employeeDetailArray) {
                Object[] rowData = {EmployeeDetail.getEmployeeId(), EmployeeDetail.getFirstName(), EmployeeDetail.getLastName(),
                    EmployeeDetail.getBirthday(), EmployeeDetail.getAddress(), EmployeeDetail.getPhoneNumber(),
                    EmployeeDetail.getEmploymentStatus(), EmployeeDetail.getSssNumber(), EmployeeDetail.getPhilhealthNumber(),
                    EmployeeDetail.getTinNumber(), EmployeeDetail.getPagibigNumber(),
                    EmployeeDetail.getJobPosition(), EmployeeDetail.getSupervisorId()};
                model.addRow(rowData);
            }
        } else {
            String message = "Employee: Database: Failed to connect to the database.";
            LoggerService.logWarning(message);
            JOptionPane.showMessageDialog(this, message);
        }
    }

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tbl_employees.getModel();
        model.setRowCount(0); // Clear existing data in the table

        HRDatabaseConnection dbConnection = new HRDatabaseConnection();
        if (dbConnection.connect()) {
            List<HRAdmin> employeeDetailArray = dbConnection.getAllEmployeeDetails();
            dbConnection.close();

            for (HRAdmin EmployeeDetail : employeeDetailArray) {
                Object[] rowData = {EmployeeDetail.getEmployeeId(), EmployeeDetail.getFirstName(), EmployeeDetail.getLastName(),
                    EmployeeDetail.getBirthday(), EmployeeDetail.getAddress(), EmployeeDetail.getPhoneNumber(),
                    EmployeeDetail.getEmploymentStatus(), EmployeeDetail.getSssNumber(), EmployeeDetail.getPhilhealthNumber(),
                    EmployeeDetail.getTinNumber(), EmployeeDetail.getPagibigNumber(),
                    EmployeeDetail.getJobPosition(), EmployeeDetail.getSupervisorId()};
                model.addRow(rowData);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to connect to the database.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee_Database.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee_Database.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee_Database.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee_Database.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new Employee_Details_HRView().setVisible(true);
//        });
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee_Database().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_record;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete_record;
    private javax.swing.JButton btn_edit;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> jcombo_status;
    private javax.swing.JLabel lbl_MotorPHEmployeeDetails;
    private javax.swing.JLabel lbl_address;
    private javax.swing.JLabel lbl_birthday;
    private javax.swing.JLabel lbl_emp;
    private javax.swing.JLabel lbl_employee_id;
    private javax.swing.JLabel lbl_first_name;
    private javax.swing.JLabel lbl_last_name;
    private javax.swing.JLabel lbl_loggedInAs;
    private javax.swing.JLabel lbl_pagibig_num;
    private javax.swing.JLabel lbl_philhealth_num;
    private javax.swing.JLabel lbl_phone;
    private javax.swing.JLabel lbl_position;
    private javax.swing.JLabel lbl_sss_num;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JLabel lbl_supervisor;
    private javax.swing.JLabel lbl_tin_num;
    private javax.swing.JTable tbl_employees;
    private javax.swing.JTextField txt_birthday;
    private javax.swing.JTextField txt_employee_id;
    private javax.swing.JTextField txt_first_name;
    private javax.swing.JTextField txt_last_name;
    private javax.swing.JTextField txt_pagibig_num;
    private javax.swing.JTextField txt_philhealth_num;
    private javax.swing.JTextField txt_phone;
    private javax.swing.JTextField txt_position;
    private javax.swing.JTextField txt_searchbox;
    private javax.swing.JTextField txt_sss_num;
    private javax.swing.JTextField txt_supervisor;
    private javax.swing.JTextField txt_tin_number;
    private javax.swing.JTextArea txtarea_address;
    // End of variables declaration//GEN-END:variables

}
